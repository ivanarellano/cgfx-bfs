/*
*	Author: Ivan Arellano
*	Version 2.5
*	Date: 3/14/11
*
*	Change Log
*	2.5 - Fixed binormal when mirroring object, Added NXT5_NM decompression,
*			moved Offset Mapping camera compute to pixel shader, Added
*			new technique without Parallax Occ. Mapping for faster rendering.
*	2.4 - Added Parallax Occlusion Mapping and Offset Mapping
*	2.3 - Environmental/ambient rewrite (all previous versions use wrong algorithms)
*	2.2 - Tweaked environment system, Added Diffuse Cube Map, added Backface Culling preference
*	2.1 - Added Linear Color Space rendering, Fixed Diffuse Desaturation/Contrast with Ambients,
*			Goo/Glass: fixed incorrect blending with global alpha and gave dedicated fresnel,
*			Code cleanup: alpha and environments are now functions, Added Ambient Color to Reflection
*			Added Light Map UV Set slider 
*	2.0 - Added Gloss Map (a new global glossiness), Reflection Env. Falloff and Bias
*	1.9 - Added Ambient and Reflection Cube Map Environments
*	1.8 - Added Global, 'Goo,' and 'Glass' Alpha
*	1.7 - Added Ambient Cube and Light Map
*	1.6 - Fixed Light Attenuation, Added Rim Light Fresnel, Added Toon Fresnel
*	1.5 - Fixed Point lighting and light loop
*	1.4 - Complete rewrite.
*
* - - - - - - - - - - - - -
*   Special thanks to Leonardo Covarrubias, Rob Galankis,
*   and Ben Cloward for their helpful resources.
*/

 #define LIGHT_COUNT 3
string description = "BFS 2500 - Ivan Arellano";
string URL = "http://ivanarellano.com";


/* * * * * * * * * * * * * *
 * AUTO-TRACKED TWEAKABLES *
 * * * * * * * * * * * * * */
float4x4 WorldViewProjection     : WorldViewProjection   < string UIWidget = "None"; >;
float4x4 WorldInverseTranspose   : WorldInverseTranspose < string UIWidget = "None"; >;
float4x4 ViewInverse             : ViewInverse           < string UIWidget = "None"; >;
float4x4 World                   : World                 < string UIWidget = "None"; >;


/* * * * * * * * * * * * * *
 *       TWEAKABLES        *
 * * * * * * * * * * * * * */
 bool useLinearColor
<
	string UIName = "Linear Color Space";
> = false;

 bool useHalfLambert
<
	string UIName = "Half Lambert";
> = false;

// Light Decay
bool useLightDecay
<
    string UIName = "Light Decay";
> = false;

float decayScale
<
	string UIName = "Light Decay Scale";
    string UIWidget = "slider";
    float UIMin = 1.0f;
    float UIMax = 200.0f;
    float UIStep = 0.1f;
> = 50.0f;



// Light 1 - Directional
float4 DirectionalLight : DIRECTION
<
    string UIName	= "Directional Light";
    string Object	= "TargetLight";
    string Space	= "World";
    int refID = 0;
> = {100.0f, -100.0f, -100.0f, 0.0f};

float3 DirectionalColor
<
	string UIName	= "Color";
	string Type		= "Color";
    int LightRef	= 0;
> = {1.0f, 1.0f, 1.0f};


// Light 2 - Point
float4 PointLight_1 : POSITION
<
    string UIName	= "Point Light 1";
    string Object	= "PointLight";
    string Space	= "World";
    int refID		= 1;
> = {-100.0f, 100.0f, 100.0f, 0.0f};

float3 PointColor_1
<
	string UIName	= "Color";
	string Type     = "Color";
    int LightRef	= 1;
> = {0.0f, 0.0f, 0.0f};


// Light 3 - Point
float4 PointLight_2 : POSITION
<
    string UIName	= "Point Light 2";
    string Object	= "PointLight";
    string Space	= "World";
    int refID		= 2;
> = {100.0f, 100.0f, 100.0f, 0.0f};

float3 PointColor_2
<
	string UIName	= "Color";
	string Type     = "Color";
    int LightRef	= 2;
> = {0.0f, 0.0f, 0.0f};
// End Lights

float uvRepeat
<
  float UIMin     = 1.0f;
  float UIMax     = 20.0f;
  float UIStep    = 0.1f;
  string UIName   = "Repeat UV";
> = 1.0f;

// DIFFUSE MAP
texture diffuseMap	: DiffuseMap
<
    string UIName = "Diffuse Map";
    string TextureType = "2D";
	int Texcoord = 0;
	int MapChannel = 1;
>;

sampler2D DiffuseMapSampler = sampler_state
{
	Texture       = <diffuseMap>;
	MinFilter     = LinearMipMapLinear;
	MagFilter     = Linear;
	WrapS         = Wrap;
	WrapT         = Wrap;
	MaxAnisotropy = 4;  //some people may need to comment this out
	LODBias       = -0.5f;
};

bool useDiffuseMap
<
    string UIName = "Diffuse Map";
> = false;

bool transparencyInDiffuse
<
    string UIName = "Transparency in Diffuse Alpha";
> = false;

// Color Correction
float desatScale
<
	string UIName = "Desaturate";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 0.1f;
> = 0.0f;

float conScale
<
	string UIName = "Contrast Gain";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 2.0f;
    float UIStep = 0.1f;
> = 0.0f;

float3 diffuseColor : DIFFUSE
<
    string UIName = "Diffuse Color";
> = {0.8f, 0.8f, 0.8f};



// SPECULAR
texture specularMap	: SpecularMap
<
    string UIName = "Specular Map";
    string TextureType = "2D";
	int Texcoord = 0;
	int MapChannel = 1;
>;

sampler2D SpecularMapSampler = sampler_state
{
	Texture       = <specularMap>;
	MinFilter     = LinearMipMapLinear;
	MagFilter     = Linear;
	WrapS         = Wrap;
	WrapT         = Wrap;
	LODBias       = -0.5f;
};

bool useSpecularMap
<
    string UIName = "Specular Map";
> = false;

bool useGlossMap
<
    string UIName = "Gloss Map in Specular Alpha";
> = false;

int specularMode
<
	string UIName = "1: Phong  2: Blinn";
	string UIWidget = "slider";
	int UIMin = 1;
	int UIMax = 2;
	int UIStep = 1;
> = 1;

float glossiness
<
	string UIName = "Glossiness";
    string UIWidget = "slider";
    float UIMin = 1.0f;
    float UIMax = 50.0f;
    float UIStep = 0.1f;
> = 20.0f;

float3 specularColor : SPECULAR
<
    string UIName = "Specular Color";
> = {0.5f, 0.5f, 0.5f};



// NORMAL MAP
texture normalMap
<
	string UIName       = "Normal Map";
	string TextureType  = "2D";
	int Texcoord		= 0;
	int MapChannel		= 1;
>;

sampler2D NormalMapSampler = sampler_state
{
	Texture		  = <normalMap>;
	MinFilter	  = LinearMipMapLinear;
	MagFilter     = Linear;
	MipFilter	  = Anisotropic;
	WrapS         = Wrap;
	WrapT         = Wrap;
	MaxAnisotropy = 4; //some people may need to comment this out
	LODBias       = -0.5f;
};

bool useNormalMap
<
	string UIName   = "Normal Map";
> = false;

bool invertGreen
<
	string UIName   = "Invert Green Channel";
> = false;

bool useSwizzledNormal
<
	string UIName	= "DXT5_NM Compressed";
> = false;

float normalIntensity
<
	string UIName   = "Normal Map Intensity";
	float UIMin     = 0.0f;
	float UIMax     = 3.0f;
	float UIStep    = 0.1f;
> = 1.0f;



// HEIGHT MAP
texture heightMap
<
	string UIName = "Height Map";
	string TextureType  = "2D";
	int Texcoord = 0;
	int MapChannel = 1;
>;

sampler2D HeightMapSampler = sampler_state
{
	Texture		= <heightMap>;
	MinFilter	= Point;
	MagFilter	= Point;
	MipFilter	= Point;
	WrapS		= Wrap;
	WrapT		= Wrap;
};

bool useParallaxOcclusion
<
    string UIName = "Parallax Occlusion Mapping";
> = false;

bool useOffsetMapping
<
    string UIName = "Offset Mapping";
> = false;

float offsetBias
<
	string UIName = "Offset Bias";
	string UIWidget = "slider";
	float UIMin = -.1f;
	float UIMax = 0.1f;
	float UIStep = 0.01;
> = 0.02f;

int heightMaxSamples
<
	string UIName = "Max Samples";
	string UIWidget = "slider";
	int UIMin = 0;
	int UIMax = 75;
	int UIStep = 1;
> = 50;

int heightMinSamples
<
	string UIName = "Min Samples";
	string UIWidget = "slider";
	int UIMin = 0;
	int UIMax = 75;
	int UIStep = 1;
> = 8;



// LIGHT MAP
texture lightMap
<
	string UIName = "Light Map";
	string TextureType  = "2D";
	int Texcoord = 1;
	int MapChannel = 2;
>;

sampler2D LightMapSampler = sampler_state
{
	Texture		= <lightMap>;
	MinFilter	= LinearMipMapLinear;
	MagFilter	= Linear;
	MipFilter	= Anisotropic;
	WrapS		= Wrap;
	WrapT		= Wrap;
};

bool useLightMap
<
    string UIName = "Light Map";
> = false;

int lightMapSet
<
	string UIName = "UV Set";
	string UIWidget = "slider";
	int UIMin = 1;
	int UIMax = 2;
	int UIStep = 1;
> = 1;

float lightMapIntensity
<
	string UIName = "Light Map Intensity";
	string UIWidget = "slider";
	float UIMin = 1.0f;
	float UIMax = 2.0f;
	float UIStep = 0.01;
> = 1.0f;



// DIFFUSE WARP
texture diffuseWarpMap
<
	string UIName       = "Diffuse Warp Map";
	string TextureType  = "2D";
	int Texcoord		= 0;
	int MapChannel		= 1;
>;

sampler2D DiffuseWarpMapSampler = sampler_state
{
  Texture       = <diffuseWarpMap>;
  MinFilter     = Point;
  MagFilter     = Point;
  MipFilter		= Point;
  WrapS         = Wrap;
  WrapT         = Wrap;
};

bool useDiffuseWarpMap
<
	string UIName = "Diffuse Warp Map";
> = false;

float diffuseWarpIntensity
<
	string UIName = "Diffuse Warp Intensity";
	string UIWidget = "slider";
	int UIMin = 1.0f;
	int UIMax = 3.0f;
	int UIStep = 0.1f;
> = 1.0f;



// Ambient Color
float3 ambientColor : AMBIENT
<
	string UIName = "Ambient Color";
> = {0.2f, 0.2f, 0.2f};

// AMBIENT ENVIRONMENT
texture ambCubeMap		: EnvMap
<
	string UIName = "Diffuse Cube Map";
	string ResourceType  = "Cube";
>;

samplerCUBE AmbientCubeMapSampler = sampler_state
{
	Texture		= <ambCubeMap>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapR     = ClampToEdge;
	WrapS     = ClampToEdge;
	WrapT     = ClampToEdge;
};

bool useAmbientCubeMap
<
    string UIName = "Ambient Environment";
> = false;

bool useReflectAsAmbient
<
    string UIName = "Resample EnvCubeMap";
> = false;

bool invertAmbientCube
<
	string UIName = "Invert Env.";
> = false;

float ambientCubeIntensity
<
	string UIName = "Ambient Env. Intensity";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 4.0f;
    float UIStep = 0.1f;
> = 1.0f;



// ENVIRONMENT
texture reflectCubeMap		: EnvMap
<
	string UIName = "Cube Map";
	string ResourceType  = "Cube";
>;

samplerCUBE EnvCubeMapSampler = sampler_state
{
	Texture		= <reflectCubeMap>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapR     = ClampToEdge;
	WrapS     = ClampToEdge;
	WrapT     = ClampToEdge;
};

bool useReflectCubeMap
<
    string UIName = "Environment Map";
> = false;

bool invertReflectCube
<
	string UIName = "Invert Env.";
> = false;

int cubeLookupMode
<
	string UIName = "1: Reflect 2: Refract";
	string UIWidget = "slider";
	int UIMin = 1;
	int UIMax = 2;
	int UIStep = 1;
> = 1;

float reflectCubeIntensity
<
	string UIName = "Env. Intensity";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 4.0f;
    float UIStep = 0.1f;
> = 1.0f;

float reflectCubeLOD
<
	string UIName = "Env. Blurriness";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 8.0f;
    float UIStep = 0.1f;
> = 0.0f;

float reflectCubeFalloff
<
	string UIName = "Env. Falloff";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 8.0f;
    float UIStep = 0.1f;
> = 0.0f;

float reflectCubeBias
<
	string UIName = "Env. Bias";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 0.1f;
> = 0.0f;

float refractIndex
<
	string UIName = "Refraction Index";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 2.0f;
    float UIStep = 0.1f;
> = 1.5f;



// FRESNEL
bool useFresnel
<
	string UIName = "Fresnel Rim Light";
> = false;

float fresnelPow
<
	string UIName = "Fresnel Falloff";
    string UIWidget = "slider";
	float UIMin = 0.0f;
	float UIMax = 6.0f;
	float UIStep = 0.1f;
> = 3.0f;

float fresnelScale
<
	string UIName = "Fresnel Intensity";
    string UIWidget = "slider";	
	float UIMin = 1.0f;
	float UIMax = 10.0f;
	float UIStep = 0.1f;
> = 1.0f;

float fresnelBias
<
	string UIName = "Fresnel Bias";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 0.1f;
> = 0.0f;

float3 fresnelColor
<
	string UIName = "Fresnel Color";
	string Type = "Color";
> = { 1.0f, 1.0f, 1.0f};



// Toon Fresnel
bool useToonFresnel
<
	string UIName = "Toon Fresnel";
> = false;

float toonFresnelScale
<
	string UIName = "Toon Fresnel Scale";
    string UIWidget = "slider";
	float UIMin = 0.0f;
	float UIMax = .995f;
	float UIStep = 0.1f;
> = .8f;

float3 toonFresnelColor
<
	string UIName = "Toon Fresnel Color";
	string Type = "Color";
> = { 0.0f, 0.0f, 0.0f};



// Alpha
bool useGoo
<
	string UIName = "Goo Alpha";
> = false;

bool useGlass
<
	string UIName = "Glass Alpha";
> = false;

float alphaFresnelPow
<
	string UIName = "Goo/Glass Falloff";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 10.0f;
    float UIStep = 0.1f;
> = 1.0f;

float globalAlpha
<
	string UIName = "Global Alpha";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 0.1f;
> = 1.0f;



// Utility
bool cullMode
<
	string UIName = "Backface Culling";
> = false;



/* * * * * * * * *
 *   FRAGMENTS   *
 * * * * * * * * */
float blinn(float3 L, float3 V, float3 N, float gloss)
{
    float3 H = normalize(L + V);
    float NdH = saturate(dot(N, H));
    if(gloss < .001f) gloss = .001f;
    return float(pow(NdH, gloss));
}

float phong(float3 L, float3 V, float3 N, float gloss)
{
    float3 R = -reflect(L, N);
    float RdV = saturate(dot(R, V));
    if(gloss < .001f) gloss = .001f;
    return float(pow(RdV, gloss));
}

float lambert(float3 L, float3 N)
{
    return float( saturate(dot(N, L)) );
}

//Half Lambert lighting: Valve Software
//In-depth article: http://www.valvesoftware.com/publications/2007/NPAR07_IllustrativeRenderingInTeamFortress2.pdf
float halfLambert(float3 L, float3 N)
{
	return saturate(pow(dot(N, L) * 0.5f + 0.5f, 2.0f));
}

// Gamma-correction code: Leonardo Covarrubias (blog.leocov.com)
// In-depth article: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html
float3 ungamma22(float3 input)
{
	if(useLinearColor)
		return pow(input, 2.2f);
	else 
		return input;
}

float3 gamma22(float3 input)
{
	if(useLinearColor)
		return pow(input, 1.0f / 2.2f);
	else
		return input;
}

float gamma(float val, float g)
{
	return pow(val, g);
}

float attenuation(float3 L, float scale)
{
    float d = length(L);
    return (1 / d) * scale;
}

float fresnel(float3 N, float3 V, float fresnelExp)
{
      return saturate(pow(1 - abs(dot(N, V)), fresnelExp));
}

float3 desaturate(float dValue, float3 albedo)
{
	float lum = dot(albedo, float3(0.2126, 0.7152, 0.0722));
	return lerp(lum.xxx, albedo, (1 - dValue));
}

float3 contrast(float cValue, float3 albedo)
{
	return albedo - cValue * (albedo - 1) * cValue * (albedo - 0.5f);
}

float3 normalsTangent(float4 tex, float3 n, float3 b, float3 t, float3 v)
{
	if(invertGreen)
		tex.g = 1.0 - tex.g;

	if(useNormalMap)
	{
		tex.rgb = tex.rgb * 2 - 1;

		if(useSwizzledNormal)
			tex.z = sqrt(1 - tex.x*tex.x - tex.y*tex.y);

		tex.xy *= normalIntensity;
		
		if(normalIntensity > 0)
			n = normalize((tex.x * t) + (tex.y * b) + (tex.z * n));
	}

  return n;
}

float3 solveEnvironment(float4 specularTex, float3 V, float3 N)
{
	float3 ambientEnv;
	float3 reflectEnv;
	float3 Env;
	float3 I;

	float gloss = glossiness / 255.0f;

	if(1 == cubeLookupMode)
		I = reflect(-V, N);
	else if(2 == cubeLookupMode)
		I = refract(-V, N, refractIndex);

	float3 newRay = lerp(I, -N, gloss);

	if(useAmbientCubeMap)
	{
		if(invertAmbientCube)
			N = N.xzy;

		if(!useReflectAsAmbient)
			ambientEnv = texCUBE(AmbientCubeMapSampler, N).rgb;
		else
			ambientEnv = texCUBElod(EnvCubeMapSampler, float4(N, 7.8f)).rgb;

		ambientEnv = ungamma22(ambientEnv) * diffuseColor * ambientCubeIntensity;
	}

	if(useReflectCubeMap)
	{
		float falloff = fresnel(N, V, reflectCubeFalloff) + reflectCubeBias;

		if(invertReflectCube) 
			newRay = newRay.xzy;

		reflectEnv = texCUBElod(EnvCubeMapSampler, float4(newRay, reflectCubeLOD)).rgb;
		reflectEnv = ungamma22(reflectEnv) * reflectCubeIntensity * falloff * specularColor;
	}

	Env = lerp(ambientEnv, reflectEnv, gloss);

	return Env;
}

float solveAlpha(float Alpha, float4 diffuseTex, float3 V, float3 N)
{
	if(!transparencyInDiffuse && useGoo || useGlass)
	{
		float Fr = fresnel(N, V, alphaFresnelPow) * 2.0f;

		if(useGlass)
		{
			useGlass = false;
			Alpha *= lerp(0, 1.0f, Fr);
		}

		if(useGoo)
		{
			useGoo = false;
			Alpha *= lerp(1.0f, 0, Fr);
		}
	}

	if(transparencyInDiffuse && useDiffuseMap)
		Alpha *= diffuseTex.a;

	return Alpha;
}

float2 ParallaxOcclusionMapping(float3 VWS, float3 NWS, float2 vParallaxOffsetTS, float2 UV)
{
	int nNumSteps = (int)lerp(heightMaxSamples, heightMinSamples, dot((half3)VWS, (half3)NWS));

	half fCurrHeight = 0;
	half fStepSize   = 1.0f / (half)nNumSteps;
	half fPrevHeight = 1.0f;
	half fNextHeight = 0;

	int    nStepIndex = 0;
	bool   bCondition = true;

	half2 vTexOffsetPerStep = fStepSize * (half2)vParallaxOffsetTS;
	half2 vTexCurrentOffset = (half2)UV;
	half  fCurrentBound     = 1.0f;
	half  fParallaxAmount   = 0;

	half2 pt1 = 0;
	half2 pt2 = 0;

	while(nStepIndex < nNumSteps) 
	{
		vTexCurrentOffset -= vTexOffsetPerStep;

		// Sample height map which in this case is stored in the alpha channel of the normal map:
		fCurrHeight = tex2Dlod(HeightMapSampler, half4(vTexCurrentOffset,0,0)).r;

		fCurrentBound -= fStepSize;

		if (fCurrHeight > fCurrentBound) 
		{   
			pt1 = half2( fCurrentBound, fCurrHeight );
			pt2 = half2( fCurrentBound + fStepSize, fPrevHeight );

			nStepIndex = nNumSteps + 1;
			fPrevHeight = fCurrHeight;
		}
		else
		{
			nStepIndex++;
			fPrevHeight = fCurrHeight;
		}
	}

	half fDelta2 = pt2.x - pt2.y;
	half fDelta1 = pt1.x - pt1.y;
  
	half fDenominator = fDelta2 - fDelta1;
  
	// SM 3.0 requires a check for divide by zero, since that operation will generate
	// an 'Inf' number instead of 0, as previous models (conveniently) did:
	if ( fDenominator == 0 )
		fParallaxAmount = 0;
	else
		fParallaxAmount = (pt1.x * fDelta2 - pt2.x * fDelta1 ) / fDenominator;
  
	half2 vParallaxOffset = vParallaxOffsetTS * (1 - fParallaxAmount );

	// The computed texture offset for the displaced point on the pseudo-extruded surface:

	return float2(UV - vParallaxOffset);
}  

float2 OffsetMapping(float3 VTS, float2 UV)
{
	float heightMap = tex2D(HeightMapSampler, UV).r;
	float2 fOffset = VTS.xy * (heightMap * 2 - 1) * offsetBias;
	return UV + fOffset;
}


/* * * * * * * * * * *
 *  SHADER STRUCTS   *
 * * * * * * * * * * */
struct a2v {
	float4 position		: POSITION;
	float2 texCoord		: TEXCOORD0;
	float2 texCoord1	: TEXCOORD1;
	float3 normal		: NORMAL;
	float3 binormal		: BINORMAL;
	float3 tangent		: TANGENT;
};

struct v2f {
	float4 position			: POSITION;
	float3 positionWS		: TEXCOORD0;
	float2 texCoord			: TEXCOORD1;
	float2 texCoord1		: TEXCOORD2;
	float3 normalWS			: TEXCOORD3;
	float3 tangentWS		: TEXCOORD4;
	float3 binormalWS		: TEXCOORD5;
	float3 eyeVecWS			: TEXCOORD6;
	float2 ParallaxOffsetTS	: TEXCOORD7;
};



/* * * * * * * * * * *
 *   VERTEX SHADER   *
 * * * * * * * * * * */
v2f vs(a2v In)
{
	v2f Out;

	// OS Position to Clip Space
    Out.position = mul(WorldViewProjection, In.position);
    
	// OS Normals to WS
	Out.normalWS	= mul(WorldInverseTranspose, float4(In.normal, 1.0f)).xyz;
	Out.tangentWS	= mul(WorldInverseTranspose, float4(In.tangent, 1.0f)).xyz;
	Out.binormalWS	= mul(WorldInverseTranspose, float4(In.binormal, 1.0f)).xyz;

	// OS Position to WS
	Out.positionWS = mul(World, In.position).xyz;

	// OS Camera to WS, then get WS Camera Vector
	Out.eyeVecWS = float3(ViewInverse[0].w, ViewInverse[1].w, ViewInverse[2].w) - Out.positionWS;
	
	// Propagate to Pixel Shader
	Out.texCoord.xy = In.texCoord * uvRepeat;
	Out.texCoord1.xy = In.texCoord1 * uvRepeat;
	
	if(useParallaxOcclusion)
	{
		float3 normalN	 = normalize(Out.normalWS);
		float3 tangentN	 = normalize(Out.tangentWS);
		float3 binormalN = normalize(Out.binormalWS);
		float3x3 mWorldToTangent = float3x3(tangentN, binormalN, normalN);

		// WS Camera to TS
        float3 Vt = mul(mWorldToTangent, Out.eyeVecWS);
	
		// Compute initial parallax displacement direction:
		float2 vParallaxDirection = normalize(Vt).xy;
           
		// The length of this vector determines the furthest amount of displacement:
		float fLength         = length(Vt);
		float fParallaxLength = sqrt(fLength * fLength - Vt.z * Vt.z) / Vt.z; 
           
		// Compute the actual reverse parallax displacement vector:
		Out.ParallaxOffsetTS = vParallaxDirection * fParallaxLength;
           
		// Need to scale the amount of displacement to account for different height ranges
		// in height maps. This is controlled by an artist-editable parameter:
		Out.ParallaxOffsetTS *= offsetBias;
	}
   
    return Out;
}



/* * * * * * * * * * * *
 *    PIXEL SHADER     *
 * * * * * * * * * * * */
float4 ps(v2f In) : COLOR
{
	float3 Cf = 0.0f;		// Final Pixel Color

	ambientColor	= ungamma22(ambientColor);
	diffuseColor	= ungamma22(diffuseColor);
	specularColor	= ungamma22(specularColor);

	float3 lights[LIGHT_COUNT][2] =
	{ 
		{ normalize(-DirectionalLight.xyz), DirectionalColor },
		{ PointLight_1.xyz - In.positionWS,	PointColor_1},
		{ PointLight_2.xyz - In.positionWS,	PointColor_2}
	};

	float atten[2] = { 1.0f, 1.0f };
	if(useLightDecay)
    {
        atten[0] = attenuation(lights[1][0], decayScale);
        atten[1] = attenuation(lights[2][0], decayScale);
    }

	lights[1][0] = normalize(lights[1][0]);
	lights[2][0] = normalize(lights[2][0]);

	float3 Nw	= normalize(In.normalWS);
	float3 Tw	= normalize(In.tangentWS);
	float3 Bw	= normalize(In.binormalWS);

	// WS Camera followed by TS Camera
	float3 V	= normalize(In.eyeVecWS);
	float3 Vt;

	float2 UV = In.texCoord;
	float2 UV2 = In.texCoord1;
	
	if(useOffsetMapping)
	{
		float3x3 TBN = float3x3(Tw, Bw, Nw); 
		Vt = normalize(mul(TBN, V));
		UV = OffsetMapping(Vt, UV);
	}
	
	float4 diffuseTex;
	if(useDiffuseMap)
	{
		diffuseTex = tex2D(DiffuseMapSampler, UV);
		diffuseTex.rgb	= ungamma22(diffuseTex.rgb);

		if(desatScale > 0)
			diffuseColor *= desaturate(desatScale, diffuseTex.rgb);
		if(conScale > 0)
			diffuseColor *= contrast(conScale, diffuseTex.rgb);

		diffuseColor *= diffuseTex.rgb;
		ambientColor *= diffuseColor;
	}

	float4 specularTex;
	if(useSpecularMap)
	{
		specularTex = tex2D(SpecularMapSampler,	UV);
		specularTex.rgb	= ungamma22(specularTex.rgb);

		specularColor *= specularTex.rgb;
	}

	if(useGlossMap)
	{
		glossiness = (specularTex.a) * 100.0f;
		
		if(glossiness <= 1.0f)
			glossiness = 1.0f;
	}

	float3 N = Nw;
	if(useNormalMap)
	{ 
		float4 nTex;
		if(!useSwizzledNormal)
			nTex = tex2D(NormalMapSampler,	UV);
		else
			nTex = tex2D(NormalMapSampler, UV).agbr;

		N = normalsTangent(nTex, Nw, Bw, Tw, V);
	}

	float lightTex;
	if(useLightMap)
	{
		if(1 == lightMapSet)
			lightTex = tex2D(LightMapSampler, UV).r;
		else if(2 == lightMapSet)
			lightTex = tex2D(LightMapSampler, UV2).r;
        
		ambientColor *= lightTex.r * lightMapIntensity;
	}

	float3 Env;
	if(useAmbientCubeMap || useReflectCubeMap)
		Env = solveEnvironment(specularTex, V, N) * ambientColor;

	for(int i = 0; i < LIGHT_COUNT; i++)
	{
		float3 L = lights[i][0];
		float3 Lc = ungamma22(lights[i][1]);
		float3 D = diffuseColor;
		float3 S = specularColor;
		float lightFactor;

		if(useHalfLambert)
			lightFactor = halfLambert(L, N);
		else
			lightFactor = lambert(L, N);

		if(!useDiffuseWarpMap)
			D *= lightFactor;
		else
			D *= ungamma22(tex2D(DiffuseWarpMapSampler, lightFactor.xx).xyz) * diffuseWarpIntensity;

		if(useAmbientCubeMap || useReflectCubeMap)
			D += Env;
		else
			D += ambientColor * (diffuseColor * 0.25f);

		if(1 == specularMode)
			S *= phong(L, V, N, glossiness);
		else if(2 == specularMode)
			S *= blinn(L, V, N, glossiness);			
		
		float3 light = D + S;
		
		if(i >= 1 && useLightDecay)
			light *= atten[i-1];
		
		Cf += light * Lc;
	}

	if(useFresnel)
	{
		float Fr = fresnel(N, V, fresnelPow) * fresnelScale + fresnelBias;
		Cf += Fr * ungamma22(fresnelColor);
	}

	if(useToonFresnel)
	{
		float toonFr = fresnel(N, V, 5.0f) * 2.0f;
		float edgeMask = 0.0f;

		ungamma22(toonFresnelScale);

		toonFr = step(toonFr, 1.0f - toonFresnelScale);
		Cf = lerp(toonFresnelColor, Cf, toonFr);
	}

	float Alpha = solveAlpha(globalAlpha, diffuseTex, V, N);

	Cf = gamma22(Cf);

	return float4(Cf, Alpha);
}



/* * * * * * * * * * * * * * * * * *
 *      PIXEL SHADER + PARALLAX    *
 * * * * * * * * * * * * * * * * * */
float4 ps_parallax(v2f In) : COLOR
{
	float3 Cf = 0.0f;		// Final Pixel Color

	ambientColor	= ungamma22(ambientColor);
	diffuseColor	= ungamma22(diffuseColor);
	specularColor	= ungamma22(specularColor);

	float3 lights[LIGHT_COUNT][2] =
	{ 
		{ normalize(-DirectionalLight.xyz), DirectionalColor },
		{ PointLight_1.xyz - In.positionWS,	PointColor_1},
		{ PointLight_2.xyz - In.positionWS,	PointColor_2}
	};

	float atten[2] = { 1.0f, 1.0f };
	if(useLightDecay)
    {
        atten[0] = attenuation(lights[1][0], decayScale);
        atten[1] = attenuation(lights[2][0], decayScale);
    }

	lights[1][0] = normalize(lights[1][0]);
	lights[2][0] = normalize(lights[2][0]);

	float3 Nw	= normalize(In.normalWS);
	float3 Tw	= normalize(In.tangentWS);
	float3 Bw	= normalize(In.binormalWS);

	// WS Camera followed by TS Camera
	float3 V	= normalize(In.eyeVecWS);
	float3 Vt;

	float2 UV = In.texCoord;
	float2 UV2 = In.texCoord1;
	
	if(useOffsetMapping)
	{
		float3x3 TBN = float3x3(Tw, Bw, Nw); 
		Vt = normalize(mul(TBN, V));
		UV = OffsetMapping(Vt, UV);
	}
	else if(useParallaxOcclusion)
	{
		UV = ParallaxOcclusionMapping(V, Nw, In.ParallaxOffsetTS, UV);
	}
	
	float4 diffuseTex;
	if(useDiffuseMap)
	{
		diffuseTex = tex2D(DiffuseMapSampler, UV);
		diffuseTex.rgb	= ungamma22(diffuseTex.rgb);

		if(desatScale > 0)
			diffuseColor *= desaturate(desatScale, diffuseTex.rgb);
		if(conScale > 0)
			diffuseColor *= contrast(conScale, diffuseTex.rgb);

		diffuseColor *= diffuseTex.rgb;
		ambientColor *= diffuseColor;
	}

	float4 specularTex;
	if(useSpecularMap)
	{
		specularTex = tex2D(SpecularMapSampler,	UV);
		specularTex.rgb	= ungamma22(specularTex.rgb);

		specularColor *= specularTex.rgb;
	}

	if(useGlossMap)
	{
		glossiness = (specularTex.a) * 100.0f;
		
		if(glossiness <= 1.0f)
			glossiness = 1.0f;
	}

	float3 N = Nw;
	if(useNormalMap)
	{ 
		float4 nTex;
		if(!useSwizzledNormal)
			nTex = tex2D(NormalMapSampler,	UV);
		else
			nTex = tex2D(NormalMapSampler, UV).agbr;

		N = normalsTangent(nTex, Nw, Bw, Tw, V);
	}

	float lightTex;
	if(useLightMap)
	{
		if(1 == lightMapSet)
			lightTex = tex2D(LightMapSampler, UV).r;
		else if(2 == lightMapSet)
			lightTex = tex2D(LightMapSampler, UV2).r;
        
		ambientColor *= lightTex.r * lightMapIntensity;
	}

	float3 Env;
	if(useAmbientCubeMap || useReflectCubeMap)
		Env = solveEnvironment(specularTex, V, N) * ambientColor;

	for(int i = 0; i < LIGHT_COUNT; i++)
	{
		float3 L = lights[i][0];
		float3 Lc = ungamma22(lights[i][1]);
		float3 D = diffuseColor;
		float3 S = specularColor;
		float lightFactor;

		if(useHalfLambert)
			lightFactor = halfLambert(L, N);
		else
			lightFactor = lambert(L, N);

		if(!useDiffuseWarpMap)
			D *= lightFactor;
		else
			D *= ungamma22(tex2D(DiffuseWarpMapSampler, lightFactor.xx).xyz) * diffuseWarpIntensity;

		if(useAmbientCubeMap || useReflectCubeMap)
			D += Env;
		else
			D += ambientColor * (diffuseColor * 0.25f);

		if(1 == specularMode)
			S *= phong(L, V, N, glossiness);
		else if(2 == specularMode)
			S *= blinn(L, V, N, glossiness);			
		
		float3 light = D + S;
		
		if(i >= 1 && useLightDecay)
			light *= atten[i-1];
		
		Cf += light * Lc;
	}

	if(useFresnel)
	{
		float Fr = fresnel(N, V, fresnelPow) * fresnelScale + fresnelBias;
		Cf += Fr * ungamma22(fresnelColor);
	}

	if(useToonFresnel)
	{
		float toonFr = fresnel(N, V, 5.0f) * 2.0f;
		float edgeMask = 0.0f;

		ungamma22(toonFresnelScale);

		toonFr = step(toonFr, 1.0f - toonFresnelScale);
		Cf = lerp(toonFresnelColor, Cf, toonFr);
	}

	float Alpha = solveAlpha(globalAlpha, diffuseTex, V, N);

	Cf = gamma22(Cf);

	return float4(Cf, Alpha);
}


/* * * * * * * * * * * * * *
 *      TECHNIQUES	       *
 * * * * * * * * * * * * * */
technique Shader
{
	pass one
	{
		CullFaceEnable = cullMode;
		CullMode = BACK;
		BlendEnable = TRUE;
		blendfunc = float2(srcalpha, oneminussrcalpha);
		VertexProgram = compile gp4vp vs();
		FragmentProgram = compile gp4fp ps();
    }
}

technique Shader_Parallax
{
	pass one
	{
		CullFaceEnable = cullMode;
		CullMode = BACK;
		BlendEnable = TRUE;
		blendfunc = float2(srcalpha, oneminussrcalpha);
		VertexProgram = compile gp4vp vs();
		FragmentProgram = compile gp4fp ps_parallax();
    }
}

technique _
{
	pass one
	{
    }
}